"""Initial version

Revision ID: 0d208181667d
Revises:
Create Date: 2019-12-05 15:21:07.654178

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision = '0d208181667d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'tenants',
        sa.Column('name', sa.String(length=256), nullable=True),
        sa.Column(
            'uuid', sqlalchemy_utils.UUIDType(), nullable=False
        ),
        sa.PrimaryKeyConstraint('uuid'),
    )
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=True)
    op.create_index(op.f('ix_tenants_uuid'), 'tenants', ['uuid'], unique=False)
    op.create_table(
        'carriers',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('name', sa.String(length=256), nullable=True),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('tenant_uuid', 'id'),
        sa.UniqueConstraint('tenant_uuid', 'name'),
    )
    op.create_index(op.f('ix_carriers_id'), 'carriers', ['id'], unique=False)
    op.create_index(op.f('ix_carriers_name'), 'carriers', ['name'], unique=True)
    op.create_table(
        'domains',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('domain', sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('tenant_uuid', 'domain'),
        sa.UniqueConstraint('tenant_uuid', 'id'),
    )
    op.create_index(op.f('ix_domains_id'), 'domains', ['id'], unique=False)
    op.create_table(
        'normalization_profiles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('country_code', sa.String(length=64), nullable=True),
        sa.Column('area_code', sa.String(length=64), nullable=True),
        sa.Column('intl_prefix', sa.String(length=64), nullable=True),
        sa.Column('ld_prefix', sa.String(length=64), nullable=True),
        sa.Column('always_intl_prefix_plus', sa.Boolean(), nullable=False),
        sa.Column('always_ld', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
        sa.UniqueConstraint('tenant_uuid', 'id'),
    )
    op.create_index(
        op.f('ix_normalization_profiles_id'),
        'normalization_profiles',
        ['id'],
        unique=False,
    )
    op.create_table(
        'carrier_trunks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('carrier_id', sa.Integer(), nullable=False),
        sa.Column('normalization_profile_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(length=256), nullable=True),
        sa.Column('sip_proxy', sa.String(length=128), nullable=False),
        sa.Column('sip_proxy_port', sa.Integer(), nullable=False),
        sa.Column('ip_address', sa.String(length=256), nullable=True),
        sa.Column('registered', sa.Boolean(), nullable=True),
        sa.Column('auth_username', sa.String(length=35), nullable=True),
        sa.Column('auth_password', sa.String(length=192), nullable=True),
        sa.Column('realm', sa.String(length=64), nullable=True),
        sa.Column('registrar_proxy', sa.String(length=128), nullable=True),
        sa.Column('from_domain', sa.String(length=64), nullable=True),
        sa.Column('expire_seconds', sa.Integer(), nullable=False),
        sa.Column('retry_seconds', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['tenant_uuid', 'carrier_id'],
            ['carriers.tenant_uuid', 'carriers.id'],
            ondelete='CASCADE',
        ),
        sa.ForeignKeyConstraint(
            ['tenant_uuid', 'normalization_profile_id'],
            ['normalization_profiles.tenant_uuid', 'normalization_profiles.id'],
            ondelete='SET NULL',
        ),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        op.f('ix_carrier_trunks_id'), 'carrier_trunks', ['id'], unique=False
    )
    op.create_index(
        op.f('ix_carrier_trunks_name'), 'carrier_trunks', ['name'], unique=True
    )
    op.create_table(
        'ipbx',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('domain_id', sa.Integer(), nullable=False),
        sa.Column('normalization_profile_id', sa.Integer(), nullable=True),
        sa.Column('customer', sa.Integer(), nullable=True),
        sa.Column('ip_fqdn', sa.String(length=256), nullable=False),
        sa.Column('ip_address', sa.String(length=256), nullable=True),
        sa.Column('port', sa.Integer(), nullable=False),
        sa.Column('registered', sa.Boolean(), nullable=False),
        sa.Column('username', sa.String(length=50), nullable=True),
        sa.Column('password', sa.String(length=192), nullable=True),
        sa.Column('password_ha1', sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(
            ['tenant_uuid', 'domain_id'],
            ['domains.tenant_uuid', 'domains.id'],
            ondelete='CASCADE',
        ),
        sa.ForeignKeyConstraint(
            ['tenant_uuid', 'normalization_profile_id'],
            ['normalization_profiles.tenant_uuid', 'normalization_profiles.id'],
            ondelete='SET NULL',
        ),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('tenant_uuid', 'domain_id', 'username'),
        sa.UniqueConstraint('tenant_uuid', 'id'),
    )
    op.create_index(op.f('ix_ipbx_id'), 'ipbx', ['id'], unique=False)
    op.create_table(
        'normalization_rules',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('profile_id', sa.Integer(), nullable=False),
        sa.Column('rule_type', sa.Integer(), nullable=False),
        sa.Column('priority', sa.Integer(), nullable=False),
        sa.Column('match_regex', sa.String(length=256), nullable=False),
        sa.Column('match_prefix', sa.String(length=256), nullable=False),
        sa.Column('replace_regex', sa.String(length=256), nullable=False),
        sa.ForeignKeyConstraint(
            ['profile_id'], ['normalization_profiles.id'], ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('profile_id', 'match_regex'),
    )
    op.create_index(
        op.f('ix_normalization_rules_id'), 'normalization_rules', ['id'], unique=False
    )
    op.create_table(
        'cdrs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('ipbx_id', sa.Integer(), nullable=True),
        sa.Column('carrier_trunk_id', sa.Integer(), nullable=True),
        sa.Column('source_ip', sa.String(length=64), nullable=False),
        sa.Column('source_port', sa.Integer(), nullable=False),
        sa.Column('from_uri', sa.String(length=256), nullable=False),
        sa.Column('to_uri', sa.String(length=256), nullable=False),
        sa.Column('call_id', sa.String(length=256), nullable=False),
        sa.Column('call_start', sa.DateTime(), nullable=True),
        sa.Column('duration', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['carrier_trunk_id'], ['carrier_trunks.id'], ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(['ipbx_id'], ['ipbx.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(op.f('ix_cdrs_id'), 'cdrs', ['id'], unique=False)
    op.create_table(
        'dids',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('ipbx_id', sa.Integer(), nullable=False),
        sa.Column('carrier_trunk_id', sa.Integer(), nullable=False),
        sa.Column('did_regex', sa.String(length=256), nullable=True),
        sa.Column('did_prefix', sa.String(length=128), nullable=True),
        sa.ForeignKeyConstraint(
            ['carrier_trunk_id'], ['carrier_trunks.id'], ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['tenant_uuid', 'ipbx_id'],
            ['ipbx.tenant_uuid', 'ipbx.id'],
            ondelete='CASCADE',
        ),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('tenant_uuid', 'did_regex'),
    )
    op.create_index(op.f('ix_dids_id'), 'dids', ['id'], unique=False)
    op.create_index('tenant_uuid', 'dids', ['did_prefix'], unique=False)
    op.create_table(
        'routing_rules',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('prefix', sa.String(length=128), nullable=True),
        sa.Column('carrier_trunk_id', sa.Integer(), nullable=False),
        sa.Column('ipbx_id', sa.Integer(), nullable=False),
        sa.Column('did_regex', sa.String(length=256), nullable=True),
        sa.Column('route_type', sa.String(length=10), nullable=False),
        sa.ForeignKeyConstraint(
            ['carrier_trunk_id'], ['carrier_trunks.id'], ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(['ipbx_id'], ['ipbx.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(op.f('ix_routing_rules_id'), 'routing_rules', ['id'], unique=False)
    op.create_table(
        'routing_groups',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'tenant_uuid',
            sqlalchemy_utils.UUIDType(),
            nullable=False,
        ),
        sa.Column('routing_rule', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['routing_rule'], ['routing_rules.id'], ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(['tenant_uuid'], ['tenants.uuid'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        op.f('ix_routing_groups_id'), 'routing_groups', ['id'], unique=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_routing_groups_id'), table_name='routing_groups')
    op.drop_table('routing_groups')
    op.drop_index(op.f('ix_routing_rules_id'), table_name='routing_rules')
    op.drop_table('routing_rules')
    op.drop_index('tenant_uuid', table_name='dids')
    op.drop_index(op.f('ix_dids_id'), table_name='dids')
    op.drop_table('dids')
    op.drop_index(op.f('ix_cdrs_id'), table_name='cdrs')
    op.drop_table('cdrs')
    op.drop_index(op.f('ix_normalization_rules_id'), table_name='normalization_rules')
    op.drop_table('normalization_rules')
    op.drop_index(op.f('ix_ipbx_id'), table_name='ipbx')
    op.drop_table('ipbx')
    op.drop_index(op.f('ix_carrier_trunks_name'), table_name='carrier_trunks')
    op.drop_index(op.f('ix_carrier_trunks_id'), table_name='carrier_trunks')
    op.drop_table('carrier_trunks')
    op.drop_index(
        op.f('ix_normalization_profiles_id'), table_name='normalization_profiles'
    )
    op.drop_table('normalization_profiles')
    op.drop_index(op.f('ix_domains_id'), table_name='domains')
    op.drop_table('domains')
    op.drop_index(op.f('ix_carriers_name'), table_name='carriers')
    op.drop_index(op.f('ix_carriers_id'), table_name='carriers')
    op.drop_table('carriers')
    op.drop_index(op.f('ix_tenants_uuid'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###
